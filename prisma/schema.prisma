// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model IngredientList {
  id            Int     @id @default(autoincrement())
  amount        String
  ingredient    String
  details       String?
  component     String?
  recipe        Recipe  @relation(fields: [recipe_id], references: [id])
  recipe_id     String
}

model Recipe {
  id            String    @id @default(uuid())
  title         String    
  photo_url     String
  ingredients   IngredientList[]
  instructions  String[]
  cook_time     String?
  prep_time     String?
  total_time    String?
  yield         String?
  user          User  @relation(fields: [user_id], references: [id])
  user_id       String
  categories    CategoriesOnRecipes[]
}

model Inventory {
  id           String @id @default(uuid())
  item         String
  amount       String?
  user          User  @relation(fields: [user_id], references: [id])
  user_id       String
}

model User {
  id           String @id @default(uuid())
  username     String   @unique
  passwordHash  String
  recipes       Recipe[]
  inventory     Inventory[]
  notes         RecipeNote[]
}

model Category {
  id            String  @id @default(uuid())
  name          String
  recipes       CategoriesOnRecipes[]
}

model CategoriesOnRecipes {
  recipe        Recipe      @relation(fields: [recipe_id], references: [id])
  recipe_id     String
  category      Category    @relation(fields: [category_id], references: [id])
  category_id   String
    @@id([recipe_id, category_id])
}

model RecipeNote {
  id            String  @id @default(uuid())
  body          String
  user          User  @relation(fields: [user_id], references: [id])
  user_id       String
  date_created  DateTime  @default(now())
  date_updated  DateTime  @updatedAt  @default(now())
}